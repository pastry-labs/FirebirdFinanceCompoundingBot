{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\r\n\r\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\r\n}\r\n\r\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\r\n}\r\n\r\nexport const SUSHI_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const KASHI_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\n// export const KASHI_ADDRESS = '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42'\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS = {\r\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS = '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB'\r\n\r\nexport const BORING_HELPER_ADDRESS = {\r\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ChainId, SolidityType } from '../constants'\r\n\r\nimport JSBI from 'jsbi'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  public readonly usd?: string\r\n\r\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\r\n\r\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\r\n\r\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\r\n\r\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\r\n\r\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\r\n\r\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\r\n\r\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\r\n\r\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\r\n\r\n  public static readonly ONE: Currency = new Currency(18, 'ONE', 'Harmony')\r\n\r\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKExChain')\r\n\r\n  public static readonly NATIVE = {\r\n    [ChainId.MAINNET]: Currency.ETHER,\r\n    [ChainId.ROPSTEN]: Currency.ETHER,\r\n    [ChainId.RINKEBY]: Currency.ETHER,\r\n    [ChainId.GÖRLI]: Currency.ETHER,\r\n    [ChainId.KOVAN]: Currency.ETHER,\r\n    [ChainId.FANTOM]: Currency.FTM,\r\n    [ChainId.FANTOM_TESTNET]: Currency.FTM,\r\n    [ChainId.MATIC]: Currency.MATIC,\r\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\r\n    [ChainId.XDAI]: Currency.XDAI,\r\n    [ChainId.BSC]: Currency.BNB,\r\n    [ChainId.BSC_TESTNET]: Currency.BNB,\r\n    [ChainId.ARBITRUM]: Currency.ETHER,\r\n    [ChainId.ARBITRUM_TESTNET]: Currency.ETHER,\r\n    [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n    [ChainId.AVALANCHE]: Currency.AVAX,\r\n    [ChainId.AVALANCHE_TESTNET]: Currency.AVAX,\r\n    [ChainId.HECO]: Currency.HT,\r\n    [ChainId.HECO_TESTNET]: Currency.HT,\r\n    [ChainId.HARMONY]: Currency.ONE,\r\n    [ChainId.HARMONY_TESTNET]: Currency.ONE,\r\n    [ChainId.OKEX]: Currency.OKT,\r\n    [ChainId.OKEX_TESTNET]: Currency.OKT\r\n  }\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  public static getNativeCurrency(chainId?: ChainId) {\r\n    if (!chainId) {\r\n      throw Error(`No chainId ${chainId}`)\r\n    }\r\n\r\n    if (!(chainId in Currency.NATIVE)) {\r\n      throw Error(`No native currency defined for chainId ${chainId}`)\r\n    }\r\n    return Currency.NATIVE[chainId]\r\n  }\r\n\r\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\r\n    const nativeCurrency = this.getNativeCurrency(chainId)\r\n    return nativeCurrency.symbol\r\n  }\r\n\r\n  public static getNativeCurrencyName(chainId?: ChainId) {\r\n    const nativeCurrency = this.getNativeCurrency(chainId)\r\n    return nativeCurrency.name\r\n  }\r\n\r\n  public getSymbol(chainId?: ChainId) {\r\n    if (!chainId) {\r\n      return this?.symbol\r\n    }\r\n\r\n    if (this?.symbol === 'ETH') {\r\n      return Currency.getNativeCurrencySymbol(chainId)\r\n    }\r\n\r\n    return this?.symbol\r\n  }\r\n\r\n  public getName(chainId?: ChainId) {\r\n    if (!chainId) {\r\n      return this?.name\r\n    }\r\n\r\n    if (this?.name === 'Ether') {\r\n      return Currency.getNativeCurrencyName(chainId)\r\n    }\r\n\r\n    return this?.name\r\n  }\r\n}\r\n\r\nconst NATIVE = Currency.ETHER\r\n\r\n// const NATIVE_CURRENCY = {\r\n//   [ChainId.MAINNET]: Currency.ETHER,\r\n//   [ChainId.ROPSTEN]: Currency.ETHER,\r\n//   [ChainId.RINKEBY]: Currency.ETHER,\r\n//   [ChainId.GÖRLI]: Currency.ETHER,\r\n//   [ChainId.KOVAN]: Currency.ETHER,\r\n//   [ChainId.FANTOM]: Currency.FTM,\r\n//   [ChainId.FANTOM_TESTNET]: Currency.FTM,\r\n//   [ChainId.MATIC]: Currency.MATIC,\r\n//   [ChainId.MATIC_TESTNET]: Currency.MATIC,\r\n//   [ChainId.XDAI]: Currency.XDAI,\r\n//   [ChainId.BSC]: Currency.BNB,\r\n//   [ChainId.BSC_TESTNET]: Currency.BNB,\r\n//   [ChainId.ARBITRUM_TESTNET]: Currency.ETHER,\r\n//   [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n//   [ChainId.AVALANCHE]: Currency.AVAX,\r\n//   [ChainId.AVALANCHE_TESTNET]: Currency.AVAX,\r\n//   [ChainId.HECO]: Currency.HT,\r\n//   [ChainId.HECO_TESTNET]: Currency.HT,\r\n//   [ChainId.HARMONY]: Currency.ONE,\r\n//   [ChainId.HARMONY_TESTNET]: Currency.ONE\r\n// }\r\n\r\nexport { NATIVE }\r\n","import { ChainId } from '../constants'\r\nimport { Currency } from './currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../utils'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\n// In reality this is a map of the wrapped version of the native token for a given network.\r\n// TODO: Rename to WNATIVE for sanity\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM'\r\n  ),\r\n  [ChainId.MATIC]: new Token(\r\n    ChainId.MATIC,\r\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ARBITRUM]: new Token(\r\n    ChainId.ARBITRUM,\r\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(\r\n    ChainId.AVALANCHE,\r\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.HARMONY]: new Token(\r\n    ChainId.HARMONY,\r\n    '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.OKEX]: new Token(\r\n    ChainId.OKEX,\r\n    '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  ),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  )\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { BigintIsh, Rounding, SolidityType, TEN } from '../../constants'\r\nimport { Currency, NATIVE } from '../currency'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\n\r\nimport { Fraction } from './fraction'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the NATIVE currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(NATIVE, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import {\r\n  BigintIsh,\r\n  ChainId,\r\n  FACTORY_ADDRESS,\r\n  FIVE,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ONE,\r\n  ZERO,\r\n  _1000,\r\n  _997\r\n} from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\nimport { keccak256, pack } from '@ethersproject/solidity'\r\nimport { parseBigintIsh, sqrt } from '../utils'\r\n\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './fractions/price'\r\nimport { Token } from './token'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS[tokenA.chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'Uniswap V2'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n\r\nlet PANCAKE_V1_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class PancakeV1Pair extends Pair {\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PANCAKE_V1_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PANCAKE_V1_PAIR_ADDRESS_CACHE = {\r\n        ...PANCAKE_V1_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PANCAKE_V1_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0xBCfCcbde45cE874adCB698cC183deBcF17952812',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PANCAKE_V1_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n\r\nlet PANCAKE_V2_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class PancakeV2Pair extends Pair {\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PANCAKE_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PANCAKE_V2_PAIR_ADDRESS_CACHE = {\r\n        ...PANCAKE_V2_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PANCAKE_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PANCAKE_V2_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n\r\nlet QUICKSWAP_V2_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class QuickSwapPair extends Pair {\r\n  public readonly liquidityToken: Token\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    super(tokenAmountA, tokenAmountB)\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      QuickSwapPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'QuickSwap'\r\n    )\r\n  }\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (QUICKSWAP_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      QUICKSWAP_V2_PAIR_ADDRESS_CACHE = {\r\n        ...QUICKSWAP_V2_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...QUICKSWAP_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return QUICKSWAP_V2_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n\r\nlet STEAK_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class SteakPair extends Pair {\r\n  public readonly liquidityToken: Token\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    super(tokenAmountA, tokenAmountB)\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      SteakPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'SteakHouse'\r\n    )\r\n  }\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (STEAK_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      STEAK_PAIR_ADDRESS_CACHE = {\r\n        ...STEAK_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...STEAK_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0x42E635D36913c94a340567761Ec8383b9932906a',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0xf3b5a34c555acc53d3752e3ebdf18213c054cacd59908e54c992bd24d4e005ab'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return STEAK_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n","import { Currency, NATIVE } from './currency'\r\nimport { Token, WETH } from './token'\r\n\r\nimport { ChainId } from '../constants'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === NATIVE && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === NATIVE && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { Currency, NATIVE } from './currency'\r\nimport { Token, WETH, currencyEquals } from './token'\r\n\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Pair } from './pair'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { Route } from './route'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../utils'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is NATIVE, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === NATIVE) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === NATIVE) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === NATIVE\r\n        ? CurrencyAmount.ether(amounts[0].raw)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === NATIVE\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { CurrencyAmount, NATIVE, Percent, Trade } from './entities'\r\n\r\nimport { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === NATIVE\r\n    const etherOut = trade.outputAmount.currency === NATIVE\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO","HECO_TESTNET","HARMONY","HARMONY_TESTNET","OKEX","OKEX_TESTNET","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","nativeCurrency","getNativeCurrencyName","getSymbol","getName","ETHER","FTM","BNB","GLMR","AVAX","HT","OKT","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","PANCAKE_V1_PAIR_ADDRESS_CACHE","PancakeV1Pair","PANCAKE_V2_PAIR_ADDRESS_CACHE","PancakeV2Pair","QUICKSWAP_V2_PAIR_ADDRESS_CACHE","QuickSwapPair","STEAK_PAIR_ADDRESS_CACHE","SteakPair","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}