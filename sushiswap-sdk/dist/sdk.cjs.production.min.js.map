{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\r\n\r\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\r\n}\r\n\r\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\r\n}\r\n\r\nexport const SUSHI_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const KASHI_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\n// export const KASHI_ADDRESS = '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42'\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: {\r\n  [chainId in ChainId]: string\r\n} = {\r\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS = {\r\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS = '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB'\r\n\r\nexport const BORING_HELPER_ADDRESS = {\r\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ROPSTEN]: '',\r\n  [ChainId.RINKEBY]: '',\r\n  [ChainId.GÖRLI]: '',\r\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.FANTOM]: '',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.MATIC_TESTNET]: '',\r\n  [ChainId.XDAI]: '',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.BSC_TESTNET]: '',\r\n  [ChainId.ARBITRUM]: '',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '',\r\n  [ChainId.AVALANCHE]: '',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '',\r\n  [ChainId.HECO_TESTNET]: '',\r\n  [ChainId.HARMONY]: '',\r\n  [ChainId.HARMONY_TESTNET]: '',\r\n  [ChainId.OKEX]: '',\r\n  [ChainId.OKEX_TESTNET]: ''\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ChainId, SolidityType } from '../constants'\r\n\r\nimport JSBI from 'jsbi'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  public readonly usd?: string\r\n\r\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\r\n\r\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\r\n\r\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\r\n\r\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\r\n\r\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\r\n\r\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\r\n\r\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\r\n\r\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\r\n\r\n  public static readonly ONE: Currency = new Currency(18, 'ONE', 'Harmony')\r\n\r\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKExChain')\r\n\r\n  public static readonly NATIVE = {\r\n    [ChainId.MAINNET]: Currency.ETHER,\r\n    [ChainId.ROPSTEN]: Currency.ETHER,\r\n    [ChainId.RINKEBY]: Currency.ETHER,\r\n    [ChainId.GÖRLI]: Currency.ETHER,\r\n    [ChainId.KOVAN]: Currency.ETHER,\r\n    [ChainId.FANTOM]: Currency.FTM,\r\n    [ChainId.FANTOM_TESTNET]: Currency.FTM,\r\n    [ChainId.MATIC]: Currency.MATIC,\r\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\r\n    [ChainId.XDAI]: Currency.XDAI,\r\n    [ChainId.BSC]: Currency.BNB,\r\n    [ChainId.BSC_TESTNET]: Currency.BNB,\r\n    [ChainId.ARBITRUM]: Currency.ETHER,\r\n    [ChainId.ARBITRUM_TESTNET]: Currency.ETHER,\r\n    [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n    [ChainId.AVALANCHE]: Currency.AVAX,\r\n    [ChainId.AVALANCHE_TESTNET]: Currency.AVAX,\r\n    [ChainId.HECO]: Currency.HT,\r\n    [ChainId.HECO_TESTNET]: Currency.HT,\r\n    [ChainId.HARMONY]: Currency.ONE,\r\n    [ChainId.HARMONY_TESTNET]: Currency.ONE,\r\n    [ChainId.OKEX]: Currency.OKT,\r\n    [ChainId.OKEX_TESTNET]: Currency.OKT\r\n  }\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  public static getNativeCurrency(chainId?: ChainId) {\r\n    if (!chainId) {\r\n      throw Error(`No chainId ${chainId}`)\r\n    }\r\n\r\n    if (!(chainId in Currency.NATIVE)) {\r\n      throw Error(`No native currency defined for chainId ${chainId}`)\r\n    }\r\n    return Currency.NATIVE[chainId]\r\n  }\r\n\r\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\r\n    const nativeCurrency = this.getNativeCurrency(chainId)\r\n    return nativeCurrency.symbol\r\n  }\r\n\r\n  public static getNativeCurrencyName(chainId?: ChainId) {\r\n    const nativeCurrency = this.getNativeCurrency(chainId)\r\n    return nativeCurrency.name\r\n  }\r\n\r\n  public getSymbol(chainId?: ChainId) {\r\n    if (!chainId) {\r\n      return this?.symbol\r\n    }\r\n\r\n    if (this?.symbol === 'ETH') {\r\n      return Currency.getNativeCurrencySymbol(chainId)\r\n    }\r\n\r\n    return this?.symbol\r\n  }\r\n\r\n  public getName(chainId?: ChainId) {\r\n    if (!chainId) {\r\n      return this?.name\r\n    }\r\n\r\n    if (this?.name === 'Ether') {\r\n      return Currency.getNativeCurrencyName(chainId)\r\n    }\r\n\r\n    return this?.name\r\n  }\r\n}\r\n\r\nconst NATIVE = Currency.ETHER\r\n\r\n// const NATIVE_CURRENCY = {\r\n//   [ChainId.MAINNET]: Currency.ETHER,\r\n//   [ChainId.ROPSTEN]: Currency.ETHER,\r\n//   [ChainId.RINKEBY]: Currency.ETHER,\r\n//   [ChainId.GÖRLI]: Currency.ETHER,\r\n//   [ChainId.KOVAN]: Currency.ETHER,\r\n//   [ChainId.FANTOM]: Currency.FTM,\r\n//   [ChainId.FANTOM_TESTNET]: Currency.FTM,\r\n//   [ChainId.MATIC]: Currency.MATIC,\r\n//   [ChainId.MATIC_TESTNET]: Currency.MATIC,\r\n//   [ChainId.XDAI]: Currency.XDAI,\r\n//   [ChainId.BSC]: Currency.BNB,\r\n//   [ChainId.BSC_TESTNET]: Currency.BNB,\r\n//   [ChainId.ARBITRUM_TESTNET]: Currency.ETHER,\r\n//   [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n//   [ChainId.AVALANCHE]: Currency.AVAX,\r\n//   [ChainId.AVALANCHE_TESTNET]: Currency.AVAX,\r\n//   [ChainId.HECO]: Currency.HT,\r\n//   [ChainId.HECO_TESTNET]: Currency.HT,\r\n//   [ChainId.HARMONY]: Currency.ONE,\r\n//   [ChainId.HARMONY_TESTNET]: Currency.ONE\r\n// }\r\n\r\nexport { NATIVE }\r\n","import { ChainId } from '../constants'\r\nimport { Currency } from './currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../utils'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\n// In reality this is a map of the wrapped version of the native token for a given network.\r\n// TODO: Rename to WNATIVE for sanity\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new Token(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new Token(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM'\r\n  ),\r\n  [ChainId.MATIC]: new Token(\r\n    ChainId.MATIC,\r\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ARBITRUM]: new Token(\r\n    ChainId.ARBITRUM,\r\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(\r\n    ChainId.AVALANCHE,\r\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.HARMONY]: new Token(\r\n    ChainId.HARMONY,\r\n    '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.OKEX]: new Token(\r\n    ChainId.OKEX,\r\n    '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  ),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  )\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { BigintIsh, Rounding, SolidityType, TEN } from '../../constants'\r\nimport { Currency, NATIVE } from '../currency'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\n\r\nimport { Fraction } from './fraction'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the NATIVE currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(NATIVE, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import {\r\n  BigintIsh,\r\n  ChainId,\r\n  FACTORY_ADDRESS,\r\n  FIVE,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ONE,\r\n  ZERO,\r\n  _1000,\r\n  _997\r\n} from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\nimport { keccak256, pack } from '@ethersproject/solidity'\r\nimport { parseBigintIsh, sqrt } from '../utils'\r\n\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './fractions/price'\r\nimport { Token } from './token'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS[tokenA.chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'Uniswap V2'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n\r\nlet PANCAKE_V1_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class PancakeV1Pair extends Pair {\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PANCAKE_V1_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PANCAKE_V1_PAIR_ADDRESS_CACHE = {\r\n        ...PANCAKE_V1_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PANCAKE_V1_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0xBCfCcbde45cE874adCB698cC183deBcF17952812',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PANCAKE_V1_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n\r\nlet PANCAKE_V2_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class PancakeV2Pair extends Pair {\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PANCAKE_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PANCAKE_V2_PAIR_ADDRESS_CACHE = {\r\n        ...PANCAKE_V2_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PANCAKE_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PANCAKE_V2_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n\r\nlet QUICKSWAP_V2_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class QuickSwapPair extends Pair {\r\n  public readonly liquidityToken: Token\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    super(tokenAmountA, tokenAmountB)\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      QuickSwapPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'QuickSwap'\r\n    )\r\n  }\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (QUICKSWAP_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      QUICKSWAP_V2_PAIR_ADDRESS_CACHE = {\r\n        ...QUICKSWAP_V2_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...QUICKSWAP_V2_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return QUICKSWAP_V2_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n\r\nlet STEAK_PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class SteakPair extends Pair {\r\n  public readonly liquidityToken: Token\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    super(tokenAmountA, tokenAmountB)\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      SteakPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'SteakHouse'\r\n    )\r\n  }\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (STEAK_PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      STEAK_PAIR_ADDRESS_CACHE = {\r\n        ...STEAK_PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...STEAK_PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            '0x42E635D36913c94a340567761Ec8383b9932906a',\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            '0xf3b5a34c555acc53d3752e3ebdf18213c054cacd59908e54c992bd24d4e005ab'\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return STEAK_PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n","import { Currency, NATIVE } from './currency'\r\nimport { Token, WETH } from './token'\r\n\r\nimport { ChainId } from '../constants'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === NATIVE && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === NATIVE && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { Currency, NATIVE } from './currency'\r\nimport { Token, WETH, currencyEquals } from './token'\r\n\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Pair } from './pair'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { Route } from './route'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../utils'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is NATIVE, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === NATIVE) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === NATIVE) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === NATIVE\r\n        ? CurrencyAmount.ether(amounts[0].raw)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === NATIVE\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { CurrencyAmount, NATIVE, Percent, Trade } from './entities'\r\n\r\nimport { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === NATIVE\r\n    const etherOut = trade.outputAmount.currency === NATIVE\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO","HECO_TESTNET","HARMONY","HARMONY_TESTNET","OKEX","OKEX_TESTNET","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","BORING_HELPER_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","this","getNativeCurrencyName","getSymbol","getName","ETHER","FTM","BNB","GLMR","AVAX","HT","OKT","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","PANCAKE_V1_PAIR_ADDRESS_CACHE","PancakeV1Pair","_PANCAKE_V1_PAIR_ADDR3","PANCAKE_V2_PAIR_ADDRESS_CACHE","PancakeV2Pair","_PANCAKE_V2_PAIR_ADDR3","QUICKSWAP_V2_PAIR_ADDRESS_CACHE","QuickSwapPair","_QUICKSWAP_V2_PAIR_AD3","STEAK_PAIR_ADDRESS_CACHE","SteakPair","_STEAK_PAIR_ADDRESS_C3","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}